<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>土卫六</title>
      <link href="2021/01/23/%E5%9C%9F%E5%8D%AB%E5%85%AD/"/>
      <url>2021/01/23/%E5%9C%9F%E5%8D%AB%E5%85%AD/</url>
      
        <content type="html"><![CDATA[<p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/other/3.jpg" alt="post-cover"></p><center><h5>太阳，对于地球来说非常重要。地球相对太阳的位置刚刚好使得地表温度适中，环境适宜，成为    <br><br>生命的摇篮可是太阳不会永远“照顾”地球，因为它45亿多岁了，已经步入“中年”</h5><br><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/other/1.png"></p><br/><h4 id="人类能走多远？"><a href="#人类能走多远？" class="headerlink" title="人类能走多远？"></a><strong>人类能走多远？</strong></h4><br/><center>    <h5>在约65亿年后太阳将进入红巨星阶段，它会变红，体积变得巨大,质量减至当前的60%，     亮度变为<br><br>现在的2000倍，地球上的温度会升高60℃左右,水分会被蒸发掉，那时人类就不得不迁居了</center></h5><br/><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/other/2.jpg"></p><br/><center><h5>在太阳的红巨星阶段，火星、木星的冰卫星上的水资源都会被蒸发    <br><br>连作为土星特征的环也被蒸发得无影无踪</h5><br/><center><h5>环顾太阳系，目前科学家认为“土卫六”可能是人类最宜居的地外天体,生命会得以存活。<br><br>当然，那是太阳“红巨星”阶段的事了现在那里还很冷呢，平均温度-180℃</h5><br/><h4 id="走近“土卫六”"><a href="#走近“土卫六”" class="headerlink" title="走近“土卫六”"></a><strong>走近“土卫六”</strong></h4><br/><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/other/%E5%9C%9F%E5%8D%AB%E5%85%AD.jpg"></p><br/><center><h5>上图就是“土卫六”，隔着大气层，你是否看到海洋和山脉了呢,不仔细瞧，恍惚以为是地球的孪生兄弟</h5><br/><center><h5>土卫六（Titan），又叫泰坦星，是土星最大的卫星，也是太阳系第二大的卫星与其他那些荒芜、死寂的卫星不<br><br>同，土卫六有厚厚的大气层，它有风和雨，有高原，有山，甚至它还有海洋根据惠更斯号探测器传回的数据，<br><br>土卫六的大气层是以氮气为主的 目前除地球外还没有发现第二颗具备此特征的天体科学家分析，土卫六远古大气<br><br>层的成分构成可能是氨气和甲烷气层中的许多化学反应也都曾经在早期的地球上出现过</h5><br/><center><h5>土卫六也像地球一样，可以绕轴自转而产生季节变化，但是它的季节大约要持续7年它现在距离太阳14.5亿公里，<br><br>比地球到太阳的距离远10倍，绕太阳公转需要29年所以温度很低，就连像甲烷、乙烷这些在地球上的<br><br>气体也变成了液态，汇聚成海洋它的海洋结构很奇特，上层是油状的海洋，存在很多液态烃类有机物，下层是<br><br>液态水的海洋美国约翰霍普金斯大学的行星科学家Sarah Hörst 说，“土卫六是一个拥有双重海洋的<br><br>星球原则上说，它上面可能存在我们熟知的生命，也可能有我们不知晓的生命”</h5><br/><center><h5>对于土卫六的了解，虽然仅是隔着厚厚的大气层远远地观测<br><br>却已经让人类兴奋不已，因为它有太多与地球相似的地方</h5><br/><center><h5>今天的土卫六好似地球早期的“历史记录”，有助我们了解地球最初期的情况，揭开地球生物的诞生之谜<br><br>那么，未来它会接手地球上的我们吗？一切还有待科学家们深入探索……</h5><br/><br/>]]></content>
      
      
      <categories>
          
          <category> write </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git笔记</title>
      <link href="2021/01/21/Git%E7%AC%94%E8%AE%B0/"/>
      <url>2021/01/21/Git%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">1.git init 初始化版本仓库</span><br><span class="line"></span><br><span class="line">2.ls -ah 查看隐藏文件</span><br><span class="line"></span><br><span class="line">3.touch readme.txt 创建文本文件</span><br><span class="line"></span><br><span class="line">4.git add readme.txt 把文件添加到仓库</span><br><span class="line"></span><br><span class="line">5.git commit -m &quot;提交说明&quot;</span><br><span class="line"></span><br><span class="line">6.git status 查看仓库状态</span><br><span class="line"></span><br><span class="line">7.git diff readme.txt 查看具体的修改内容</span><br><span class="line"></span><br><span class="line">8.git add readme.txt 提交修改和提交新文件是一样的两步,第一步</span><br><span class="line"></span><br><span class="line">9.git commit -m &quot;修改备注&quot;</span><br><span class="line"></span><br><span class="line">10.git log&#x2F;git log --pretty&#x3D;onelime 查看历史记录</span><br><span class="line"></span><br><span class="line">11.git reset --hard HEAD^&#x2F;HEAD^^&#x2F;HEAD~100 回退到上个版本</span><br><span class="line"></span><br><span class="line">12.git reset --hard commitId 回退到指定版本</span><br><span class="line"></span><br><span class="line">13.git reflog 记录每一次的命令</span><br><span class="line"></span><br><span class="line">14.git diff HEAD -- readme.txt  工作区和版本库里面的最新区别</span><br><span class="line"></span><br><span class="line">15.git checkout -- file 回到最近一次git commit或git add时的状态</span><br><span class="line"></span><br><span class="line">16.git reset HEAD readme.txt 如果是add没有commit 清空缓存区转为最新版本</span><br><span class="line"></span><br><span class="line">17.git checkout -- readme.txt 丢掉工作区修改</span><br><span class="line"></span><br><span class="line">删除文件  </span><br><span class="line"></span><br><span class="line">(1).rm readme.txt </span><br><span class="line"></span><br><span class="line">(2).git rm readme.txt</span><br><span class="line"></span><br><span class="line">(3).git commit -m &quot;删除readme.txt&quot;</span><br><span class="line"></span><br><span class="line">18.把本地仓库推送到github仓库</span><br><span class="line"></span><br><span class="line">    (1).git remote add origin xx.git</span><br><span class="line">    </span><br><span class="line">    (2).git push -u origin master</span><br><span class="line">    </span><br><span class="line">    (3).git push origin master 把本地master分支的最新修改推送到github</span><br><span class="line"></span><br><span class="line">19.git clone XX.git从远程克隆</span><br><span class="line"></span><br><span class="line">20.git checkout -b dev 创建并切换到dev</span><br><span class="line"></span><br><span class="line">21.git branch 列出所有分支</span><br><span class="line"></span><br><span class="line">22.git checkout dev 切换到dev分支</span><br><span class="line"></span><br><span class="line">23.git merge dev 合并指定分支到当前分支</span><br><span class="line"></span><br><span class="line">24.git branch -d dev 删除dev分支</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">25.切换分支</span><br><span class="line"></span><br><span class="line">    (1).git switch -c dev  创建并切换分支</span><br><span class="line">    </span><br><span class="line">    (2).git switch master&#x2F;git checkout master 切换已有分支</span><br><span class="line"></span><br><span class="line">26.git branch dev 创建dev分支</span><br><span class="line"></span><br><span class="line">27.git log --graph --pretty&#x3D;online --abbrev-commit 查看分支合并图</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">28.分支的合并</span><br><span class="line"></span><br><span class="line">    (1).Git默认使用Fast forward模式</span><br><span class="line">    </span><br><span class="line">    (2).git merge --no-ff -m &quot;备注&quot; dev  不适用Fast forward模式 会默认保存合并历史记录</span><br><span class="line"></span><br><span class="line">29.工作区(stash)</span><br><span class="line"></span><br><span class="line">    (1).git stash 当前现场保存到工作区</span><br><span class="line">    </span><br><span class="line">    (2).git stash list 显示工作区存放列表</span><br><span class="line">    </span><br><span class="line">    (3).git stash apply 恢复工作区 然后 git stash drop删除工作区</span><br><span class="line">    </span><br><span class="line">    (4).git stash pop 恢复同时然后删除</span><br><span class="line">    </span><br><span class="line">    (5).git cherry-pick &lt;commit&gt;命令 把bug提交的修改&quot;复制&quot;到当前分支</span><br><span class="line"></span><br><span class="line">30.git branch -D dev 丢弃一个没有个合并过的分支,强行删除</span><br><span class="line"></span><br><span class="line">31.git remote -v 查看远程库地址,如果没有推送权限,就看不到push的地址</span><br><span class="line"></span><br><span class="line">    origin  https:&#x2F;&#x2F;gitee.com&#x2F;ddmaq&#x2F;maq_web (fetch)</span><br><span class="line">    </span><br><span class="line">    origin  https:&#x2F;&#x2F;gitee.com&#x2F;ddmaq&#x2F;maq_web (push)</span><br><span class="line"></span><br><span class="line">32.推送到远程分支</span><br><span class="line"></span><br><span class="line">    (1).git push origin master&#x2F;dev</span><br><span class="line">    </span><br><span class="line">33.git checkout -b dev origin&#x2F;dev 创建远程分支</span><br><span class="line"></span><br><span class="line">34.多人协作</span><br><span class="line"></span><br><span class="line">    git pull失败,原因是本地分支dev没有与远程分支origin&#x2F;dev建立连接,设置dev和origin&#x2F;dev的连接?</span><br><span class="line">    </span><br><span class="line">    git branch --set-upstream-to&#x3D;origin&#x2F;dev dev</span><br><span class="line"></span><br><span class="line">35.git打标签创建快照</span><br><span class="line"></span><br><span class="line">    (1).git tag v1.0</span><br><span class="line">    </span><br><span class="line">    (2).git tag 查看所有标签</span><br><span class="line">    </span><br><span class="line">    (3).git tag v0.9 历史记录id</span><br><span class="line">    </span><br><span class="line">    (4).git show v1.0 查看标签信息</span><br><span class="line">    </span><br><span class="line">    (5).git tag -a v1.0 -m &quot;我是说明&quot; 历史记录id  &#x3D;创建带有说明的标签</span><br><span class="line">    </span><br><span class="line">    (6).git tag -d v0.1 删除标签</span><br><span class="line">    </span><br><span class="line">    (7).git push origin v1.0 推送某个标签到远程</span><br><span class="line">    </span><br><span class="line">    (8).git push origin --tags 推送所有标签到远程</span><br><span class="line">    </span><br><span class="line">    (9).删除远程标签,先删除本地在删除远程</span><br><span class="line">    </span><br><span class="line">        (9.1).git tag -d v0.9</span><br><span class="line">        </span><br><span class="line">        (9.2).git push origin :refs&#x2F;tags&#x2F;v0.9</span><br><span class="line"></span><br><span class="line">36.git remote -v 查看绑定的远程库信息</span><br><span class="line"></span><br><span class="line">37.git remote rm origin删除已有的远程仓库</span><br><span class="line"></span><br><span class="line">38.忽略特殊文件</span><br><span class="line"></span><br><span class="line">        (1).忽略某些文件,需要编写 .gitignore</span><br><span class="line">        </span><br><span class="line">        (2).git check-ignore检查规则</span><br><span class="line">        </span><br><span class="line">        (3). .gitignore文件本身要放在版本库里,并且可以对.gitignore做版本管理</span><br></pre></td></tr></table></figure><p>IDEA中Git管理的文件:</p><br/><p>绿色，已经加入版本控制暂未提交； add但没commit</p><br/><p>红色，未加入版本控制； 没有add</p><br/><p>蓝色，加入版本控制，已提交，有改动； add且commit</p><br/><p>白色，加入版本控制，已提交，无改动；</p><br/><br/><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/Japan/10.jpg" alt="post-cover"></p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda学习</title>
      <link href="2021/01/20/Lambda%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/01/20/Lambda%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h5 id="在不用就落后了"><a href="#在不用就落后了" class="headerlink" title="在不用就落后了"></a><strong>在不用就落后了</strong></h5><br/><h5 id="声明"><a href="#声明" class="headerlink" title="声明"></a><strong>声明</strong></h5><p>List<String> names = Arrays.asList(“edmonds”, “aruis”, “beason”, “chris”);</p><br/><p>List<String> stringCollection = new ArrayList&lt;&gt;();<br>stringCollection.add(“abc”);<br>stringCollection.add(“ace”);<br>stringCollection.add(“mvp”);</p><br/><p>List<User> userList=new ArrayList&lt;&gt;();<br>User user1=new User();<br>user1.setPhone(“15853722917”);<br>user1.setRegisterBy(1);<br>User user2=new User();<br>user2.setPhone(“15853722917”);<br>user2.setRegisterBy(2);<br>userList.add(user1);<br>userList.add(user2);</p><br/><p>Map&lt;String,Object&gt; map=new HashMap&lt;&gt;();<br>map.put(“a”,1);<br>map.put(“b”,2);</p><h5 id="1-sort排序"><a href="#1-sort排序" class="headerlink" title="1.sort排序"></a><strong>1.sort排序</strong></h5><br/><p>Collections.sort(names,(a,b)-&gt;b.compareTo(a));</p><br/><p>stringCollection.stream().map(String::toUpperCase).sorted((a, b) -&gt; b.compareTo(a)).forEach(System.out::println);</p><br/><p><strong>2.stream,filter(循环和遍历)</strong></p><br/><p>stringCollection.stream().filter(s-&gt;s.startsWith(“a”)).collect(Collectors.toList());</p><p><br/>stringCollection.stream().filter(s-&gt;s.startsWith(“a”)).forEach(System.out::println);</p><p><br/>stringCollection.forEach(s-&gt;{<br>   //业务处理<br>});</p><br/><p><strong>3.::循环取出属性</strong></p><br/><p>userList.stream().map(User::getPhone).distinct().collect(Collectors.toList());</p><p><br/>names.stream().map(String::length).distinct().collect(Collectors.toList());</p><br/><p><strong>4.sum求和</strong></p><br/><p>userList.stream().map(User::getRegisterBy).mapToDouble(Integer::doubleValue).sum();</p><br/><p><strong>5.Match是否包含</strong></p><br/><p>boolean a = stringCollection.stream().anyMatch(s -&gt; s.startsWith(“a”));//包含一个</p><p><br/>boolean b = stringCollection.stream().allMatch(s -&gt; s.startsWith(“a”));//全部都是</p><p><br/>boolean c = stringCollection.stream().noneMatch(s -&gt; s.startsWith(“a”));//没有一个</p><br/><p><strong>6.count计数</strong></p><br/><p>stringCollection.stream().filter((s) -&gt; s.startsWith(“b”)).count();</p><br/><p><strong>7.map遍历</strong></p><br/><p>map.forEach((id, val) -&gt; System.out.println(id+”,”+val));</p><p><br/>map.forEach((id, val) -&gt; {</p><p>});</p><br/><br/><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/Japan/8.jpg" alt="post-cover"></p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令(持续更新)</title>
      <link href="2020/12/30/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2020/12/30/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/other/niuyue.jpg" alt="post-cover"></p><h5 id="1-Linux-centos重启命令："><a href="#1-Linux-centos重启命令：" class="headerlink" title="1.Linux centos重启命令："></a><strong>1.Linux centos重启命令：</strong></h5><br/><p>&nbsp;&nbsp;&nbsp;1.reboot 立刻重启</p><br/><p>&nbsp;&nbsp;&nbsp;2.shutdown -r now 立刻重启(root用户使用)</p><br/><p>&nbsp;&nbsp;&nbsp;3.shutdown -r 10 过10分钟自动重启(root用户使用)</p><br/><p>&nbsp;&nbsp;&nbsp;4.shutdown -r 20:35 在时间为20:35时候重启(root用户使用)</p><br/><p>　　如果是通过shutdown命令设置重启的话，可以用shutdown -c命令取消重启</p><br/><h5 id="2-Linux-centos关机命令："><a href="#2-Linux-centos关机命令：" class="headerlink" title="2.Linux centos关机命令："></a><strong>2.Linux centos关机命令：</strong></h5><br/><p>&nbsp;&nbsp;&nbsp;1.halt 立刻关机</p><br/><p>&nbsp;&nbsp;&nbsp;2.poweroff 立刻关机</p><br/><p>&nbsp;&nbsp;&nbsp;3.shutdown -h now 立刻关机(root用户使用)</p><br/><p>&nbsp;&nbsp;&nbsp;4.shutdown -h 10 10分钟后自动关机</p><br/><h5 id="3-查看CentOS版本"><a href="#3-查看CentOS版本" class="headerlink" title="3.查看CentOS版本"></a><strong>3.查看CentOS版本</strong></h5><br/><p>&nbsp;&nbsp;&nbsp;cat /etc/redhat-release </p><br/><h5 id="4-查看Linux版本信息"><a href="#4-查看Linux版本信息" class="headerlink" title="4.查看Linux版本信息"></a><strong>4.查看Linux版本信息</strong></h5><br/><p>&nbsp;&nbsp;&nbsp;cat /proc/version OR uname -a</p><br/><h5 id="5-查找文件地址"><a href="#5-查找文件地址" class="headerlink" title="5.查找文件地址"></a><strong>5.查找文件地址</strong></h5><br/><p>&nbsp;&nbsp;&nbsp;find / -name redis-server</p><br/><p><strong>6.清空文件</strong></p><br/><p>&nbsp;&nbsp;&nbsp;vim file<br/></p><p>&nbsp;&nbsp;&nbsp;:%d</p><br/><p><strong>7.查找jdk路径</strong></p><br/><p>&nbsp;&nbsp;&nbsp;配置过JAVA_HOME可用echo $JAVA_HOME,反之如下</p><br/><p>&nbsp;&nbsp;&nbsp;[root@localhost ~]# which java</p><br/><p>&nbsp;&nbsp;&nbsp;/usr/bin/java</p><br/><p>&nbsp;&nbsp;&nbsp;[root@localhost ~]# ls -lrt /usr/bin/java</p><br/><p>&nbsp;&nbsp;&nbsp;lrwxrwxrwx. 1 root root 22 Aug 17 15:12 /usr/bin/java -&gt; /etc/alternatives/java</p><br/><p>&nbsp;&nbsp;&nbsp;[root@localhost ~]# ls -lrt /etc/alternatives/java</p><br/><p>&nbsp;&nbsp;&nbsp;lrwxrwxrwx. 1 root root 46 Aug 17 15:12 /etc/alternatives/java -&gt; /usr/lib/jvm/jre-1.7.0</p><p>&nbsp;&nbsp;&nbsp;openjdk.x86_64/bin/java</p><br/><p><strong>8.文件打开编辑中突然关闭解决</strong></p><br/><p>&nbsp;&nbsp;&nbsp;然后输入ls -a 查找全部隐藏文件</p><br/><p>&nbsp;&nbsp;&nbsp;发现多了个swp的文件</p><br/><p>&nbsp;&nbsp;&nbsp;使用命令rm -rf .nginx.conf.swp 进行删除</p><p><strong>9.根据端口号找到进程</strong></p><br/><p>&nbsp;&nbsp;&nbsp;ps aux|grep 9000</p><br/><p>&nbsp;&nbsp;&nbsp;netstat -lnp|grep 9000(最后那个是进程号)</p><br/><p><strong>10.查找文件关键字及其上下各 10 行</strong></p><br/><p>&nbsp;&nbsp;&nbsp;grep 关键词 -B 10 -A 10 文件 | tee r.txt</p><p><br/><br/></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis安装下载</title>
      <link href="2020/12/28/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2020/12/28/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/Japan/1.jpg" alt="post-cover"></p><h5 id="一-下载安装"><a href="#一-下载安装" class="headerlink" title="一.下载安装"></a><strong>一.下载安装</strong></h5><br/><p>&nbsp;&nbsp;&nbsp;1.wget <a href="https://download.redis.io/releases/redis-6.0.9.tar.gz">https://download.redis.io/releases/redis-6.0.9.tar.gz</a> (<a href="https://redis.io/download">https://redis.io/download</a> 官网可以找到最新下载地址)</p><br/><p>&nbsp;&nbsp;&nbsp;2.tar xzf redis-6.0.9.tar.gz</p><br/><p>&nbsp;&nbsp;&nbsp;3.cd redis-6.0.9</p><br/><p>&nbsp;&nbsp;&nbsp;4.make</p><br/><p>&nbsp;&nbsp;&nbsp;我在make过程中出现了报错,慌！！！</p><br/><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/content/redis/1" alt="image-20201228115256903"></p><br/><h6 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h6><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;自redis 6.0.0 之后，编译 redis 需要支持 C11 特性，C11 特性在 4.9 中被引入。</p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;Centos7 默认 gcc 版本为 4.8.5，所以需要升级gcc版本。</p><br/><h6 id="nbsp-nbsp-nbsp-解决"><a href="#nbsp-nbsp-nbsp-解决" class="headerlink" title="&nbsp;&nbsp;&nbsp;解决:"></a>&nbsp;&nbsp;&nbsp;解决:</h6><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;yum -y install gcc gcc-c++ make tcl </p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;yum -y install centos-release-scl </p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils </p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;scl enable devtoolset-9 bash</p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;然后重新make即可(无异常可跳过)</p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;开两个窗口,在redis 6.0.0目录,分别输入以下命令就连接上了</p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;src/redis-server</p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;src/redis-cli</p><br/><h5 id="二-启动关闭"><a href="#二-启动关闭" class="headerlink" title="二.启动关闭"></a><strong>二.启动关闭</strong></h5><br/><h6 id="nbsp-nbsp-nbsp-1-后台运行"><a href="#nbsp-nbsp-nbsp-1-后台运行" class="headerlink" title="&nbsp;&nbsp;&nbsp;1.后台运行"></a>&nbsp;<strong>&nbsp;&nbsp;1.后台运行</strong></h6><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;修改根目录下的redis.conf,最好备份一下,daemonize改为yes,启动一下            </p><br/><p>&nbsp;&nbsp;&nbsp;<img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/content/redis/2.png" alt="2"></p><br/><h6 id="nbsp-nbsp-nbsp-2-启动进程"><a href="#nbsp-nbsp-nbsp-2-启动进程" class="headerlink" title="&nbsp;&nbsp;&nbsp;2.启动进程"></a><strong>&nbsp;&nbsp;&nbsp;2.启动进程</strong></h6><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;根目录：src/redis-server redis.conf</p><br/><h6 id="nbsp-nbsp-nbsp-3-关闭进程"><a href="#nbsp-nbsp-nbsp-3-关闭进程" class="headerlink" title="&nbsp;&nbsp;&nbsp;3.关闭进程"></a><strong>&nbsp;&nbsp;&nbsp;3.关闭进程</strong></h6><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;ps aux|grep redis,</p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;kill -9 进程号</p><br/><h6 id="nbsp-nbsp-nbsp-4-进入命令行"><a href="#nbsp-nbsp-nbsp-4-进入命令行" class="headerlink" title="&nbsp;&nbsp;&nbsp;4.进入命令行"></a>&nbsp;<strong>&nbsp;&nbsp;4.进入命令行</strong></h6><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;(1)根目录：src/redis-cli</p><h6 id=""><a href="#" class="headerlink" title=""></a><br/></h6><p>&nbsp;&nbsp;&nbsp;&nbsp;auth 密码(有密码使用)</p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;(2).redis-cli -h IP地址 -p 6379 -a 密码(使用这种方式前提,redis-cli在/usr/local/bin目录下)</p><br/><h5 id="三-设为服务"><a href="#三-设为服务" class="headerlink" title="三.设为服务"></a><strong>三.设为服务</strong></h5><br/><h6 id="nbsp-nbsp-nbsp-1-cd-usr-lib-systemd-system"><a href="#nbsp-nbsp-nbsp-1-cd-usr-lib-systemd-system" class="headerlink" title="&nbsp;&nbsp;&nbsp;1.cd  /usr/lib/systemd/system"></a><strong>&nbsp;&nbsp;&nbsp;1.cd  /usr/lib/systemd/system</strong></h6><br/><h6 id="nbsp-nbsp-nbsp-2-touch-redis-service-添加以下内容"><a href="#nbsp-nbsp-nbsp-2-touch-redis-service-添加以下内容" class="headerlink" title="&nbsp;&nbsp;&nbsp;2.touch redis.service,添加以下内容"></a><strong>&nbsp;&nbsp;&nbsp;2.touch redis.service,添加以下内容</strong></h6><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;[Unit]</p><p>&nbsp;&nbsp;&nbsp;&nbsp;Description=Redis Server</p><p>&nbsp;&nbsp;&nbsp;&nbsp;After=network.target</p><p>&nbsp;&nbsp;&nbsp;&nbsp;[Service]</p><p>&nbsp;&nbsp;&nbsp;&nbsp;PIDFile=/var/run/redis_6379.pid</p><p>&nbsp;&nbsp;&nbsp;&nbsp;ExecStart=/usr/java/redis/redis-6.0.9/src/redis-server /usr/java/redis/redis-6.0.9/redis.conf</p><p>&nbsp;&nbsp;&nbsp;&nbsp;ExecStop=/usr/local/bin/redis-cli -a passwd shutdown</p><p>&nbsp;&nbsp;&nbsp;&nbsp;ExecReload=/bin/kill -s HUP $MAINPID</p><p>&nbsp;&nbsp;&nbsp;&nbsp;[Install]</p><p>&nbsp;&nbsp;&nbsp;&nbsp;WantedBy=mutli-user.target</p><br/><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;备注：ExecStart和ExecStop换成你的路径</p><p>​    <br/></p><h6 id="nbsp-nbsp-nbsp-nbsp-3-创建软连接"><a href="#nbsp-nbsp-nbsp-nbsp-3-创建软连接" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;3.创建软连接"></a><strong>&nbsp;&nbsp;&nbsp;&nbsp;3.创建软连接</strong></h6><p>​    <br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;ln -s <code>pwd</code>/redis.service /etc/systemd/system/multi-user.target.wants</p><p>​    <br/></p><h6 id="nbsp-nbsp-nbsp-4-重新载入-systemctl-并启动服务"><a href="#nbsp-nbsp-nbsp-4-重新载入-systemctl-并启动服务" class="headerlink" title="&nbsp;&nbsp;&nbsp;4.重新载入 systemctl 并启动服务"></a><strong>&nbsp;&nbsp;&nbsp;4.重新载入 systemctl 并启动服务</strong></h6><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;systemctl daemon-reload</p><br/><h6 id="nbsp-nbsp-nbsp-5-启动服务"><a href="#nbsp-nbsp-nbsp-5-启动服务" class="headerlink" title="&nbsp;&nbsp;&nbsp;5.启动服务"></a><strong>&nbsp;&nbsp;&nbsp;5.启动服务</strong></h6><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;systemctl start redis.service</p><br/><h6 id="nbsp-nbsp-nbsp-6-关闭服务"><a href="#nbsp-nbsp-nbsp-6-关闭服务" class="headerlink" title="&nbsp;&nbsp;&nbsp;6.关闭服务"></a><strong>&nbsp;&nbsp;&nbsp;6.关闭服务</strong></h6><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;systemctl stop redis.service</p><br/><h6 id="nbsp-nbsp-nbsp-7-重启服务"><a href="#nbsp-nbsp-nbsp-7-重启服务" class="headerlink" title="&nbsp;&nbsp;&nbsp;7.重启服务"></a><strong>&nbsp;&nbsp;&nbsp;7.重启服务</strong></h6><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;systemctl restart redis.service</p><br/><h6 id="nbsp-nbsp-nbsp-8-查看服务状态"><a href="#nbsp-nbsp-nbsp-8-查看服务状态" class="headerlink" title="&nbsp;&nbsp;&nbsp;8.查看服务状态"></a>&nbsp;&nbsp;<strong>&nbsp;8.查看服务状态</strong></h6><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;systemctl status redis.service</p><br/><h6 id="nbsp-nbsp-nbsp-9-设置开机启动"><a href="#nbsp-nbsp-nbsp-9-设置开机启动" class="headerlink" title="&nbsp;&nbsp;&nbsp;9.设置开机启动"></a><strong>&nbsp;&nbsp;&nbsp;9.设置开机启动</strong></h6><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;systemctl enable redis.service</p><br/><h6 id="nbsp-nbsp-nbsp-10-停止开机启动"><a href="#nbsp-nbsp-nbsp-10-停止开机启动" class="headerlink" title="&nbsp;&nbsp;&nbsp;10.停止开机启动"></a><strong>&nbsp;&nbsp;&nbsp;10.停止开机启动</strong></h6><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;systemctl disable redis.service</p><br/><h5 id="四-修改密码"><a href="#四-修改密码" class="headerlink" title="四.修改密码"></a><strong>四.修改密码</strong></h5><p>​        <br/></p><h6 id="nbsp-nbsp-nbsp-1-临时设置密码"><a href="#nbsp-nbsp-nbsp-1-临时设置密码" class="headerlink" title="&nbsp;&nbsp;&nbsp;1.临时设置密码"></a><strong>&nbsp;&nbsp;&nbsp;1.临时设置密码</strong></h6><p>&nbsp;&nbsp;&nbsp;&nbsp;config set requirepass 密码(重启密码会失效)</p><br/><h6 id="nbsp-nbsp-nbsp-2-设置密码"><a href="#nbsp-nbsp-nbsp-2-设置密码" class="headerlink" title="&nbsp;&nbsp;&nbsp;2.设置密码"></a><strong>&nbsp;&nbsp;&nbsp;2.设置密码</strong></h6><p>&nbsp;&nbsp;&nbsp;&nbsp;修改redis.conf文件,修改requirepass对应的值,/+关键字 可以搜索,按N查找下一个</p><p>​    &nbsp;&nbsp;&nbsp;    <img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/content/redis/3.png" alt="3"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;重启服务    </p><br/><h6 id="nbsp-nbsp-nbsp-3-查看密码"><a href="#nbsp-nbsp-nbsp-3-查看密码" class="headerlink" title="&nbsp;&nbsp;&nbsp;3.查看密码"></a><strong>&nbsp;&nbsp;&nbsp;3.查看密码</strong></h6><p>&nbsp;&nbsp;&nbsp;&nbsp;config get requirepass</p><p>​    <br/></p><p>​    <br/></p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伊隆·马斯克</title>
      <link href="2020/12/22/%E9%A9%AC%E6%96%AF%E5%85%8B%E4%BA%8B%E8%BF%B9/"/>
      <url>2020/12/22/%E9%A9%AC%E6%96%AF%E5%85%8B%E4%BA%8B%E8%BF%B9/</url>
      
        <content type="html"><![CDATA[<p>起初认识马斯克是特斯拉汽车,很疑惑一个做电车的公司市值这么高,原来没这么简单。</p><p>伊隆·马斯克 (英语：Elon Musk，1971年6月28日－），是一名出生于南非的企业家，先后读于宾夕法尼亚大学和斯坦福大学,他同时具有南非、美国、加拿大国籍，并以SpaceX、特斯拉汽车、PayPal共同创办人而闻名。马斯克担任SpaceX的首席执行官兼首席设计师、特斯拉汽车首席执行官兼产品架构师、SolarCity的董事长。他也是现代第一辆可行电动车Tesla Roadster的联合设计者之一。在2019年福布斯美国400富豪榜，他以199亿美元的资产，排名第23名。在2020年福布斯美国400富豪榜，他以700亿美元的资产，排名第7名。</p><br/><h5 id="Zip2"><a href="#Zip2" class="headerlink" title="Zip2"></a><strong>Zip2</strong></h5><p>在放弃了研究生学位以后，他和他兄弟Kimbal Musk一起开始了一个叫Zip2的项目（一个为新闻机构开发的在线出版软体）。1999年，Compaq的AltaVista部门以3.07亿美元现金和3400万美元股票期权收购了ZIP2。</p><br/><h5 id="PayPal"><a href="#PayPal" class="headerlink" title="PayPal"></a><strong>PayPal</strong></h5><p>他与人合伙创办了PayPal网上付费机制，让网上的消费者既安全又方便地付费，成为迄今最成功的网上付费方式。<br/></p><p>2002年10月，他以15亿美元的价格将PayPal转卖给了全球最大的网上商店——电子港湾（eBay）。</p><br/><h5 id="SpaceX"><a href="#SpaceX" class="headerlink" title="SpaceX"></a><strong>SpaceX</strong></h5><p>2002年6月，马斯克成立了第三家公司并兼任CEO和CTO。这是一家私人太空发射公司，名叫SpaceX（太空探索技术公司），目标包括月球和火星。公司的设计理念为简单，以保证安全性和节约成本。SpaceX获得NASA16亿美元的合约，为NASA承担12次太空发射任务SpaceX的工厂极为庞大，有着3,000名员工。</p><br/><p>2010年12月8日，马斯克的SpaceX太空探索技术公司研发的猎鹰9号火箭成功将“龙飞船”发射到地球轨道，这是全球有史以来首次由私人企业发射到太空，并能顺利折返的飞船。整个宇航界为之震动。根据NASA的计划，当美国所有航天飞机2011年退役以后，将依赖像SpaceX公司这样的私营公司将物资补给送入国际空间站。同年马斯克带领巴拉克·奥巴马等人参观SpaceX</p><br/><p>2012年5月22日，SpaceX发射了一枚两级火箭，将一艘名为龙飞船的太空飞船送上太空，并于三日后与国际空间站对接，开启了太空私营化的时代。</p><br/><p>SpaceX已经成功发射可以重复使用的猎鹰九号。火箭可以重复使用，大幅降低成本。</p><br/><p>2020年5月31日，SpaceX发射载人航天飞船，两名航天员搭载龙飞船2号，飞向国际空间站，并且成功回收一级推进器，开启商业载人航空的时代。</p><br/><p>SpaceX公司还发起了星链计划，它的目的是为了解决偏远地区没有互联网的问题，并且致力于解决在飞机上的用网问题。</p><br/><h5 id="特斯拉汽车"><a href="#特斯拉汽车" class="headerlink" title="特斯拉汽车"></a><strong>特斯拉汽车</strong></h5><p>2010年马斯克察看特斯拉汽车的一个装配展示<br/></p><p>2010年马斯克给加利福尼亚参议员Dianne Feinstein展示特斯拉汽车Model S<br/></p><p>马斯克是特斯拉汽车的合伙创始人和总设计师，并带领设计了电动汽车Tesla Roadster。他对电动汽车的兴趣始于Tesla创立之前。很早以前他去斯坦福作应用物理和材料科学的博士学位，目标就是研发出超级电容器能够给电动汽车提供足够能量。<br/></p><p>特斯拉汽车公司的第一款电动跑车Tesla Roadster，已在31多个国家销售超过2300辆。特斯拉预计是在2012年6月开始其四门轿车Model S的生产，并于2012年2月9日，推出其第三款电动汽车Model X，的开拓SUV/ MPV车市场。Model X定于2014年开始生产。<br/></p><p>特斯拉还为戴姆勒Smart EV和奔驰A系提供电动动力系统，为丰田RAV4提供电动系统。马斯克还成功让两家公司作为特斯拉汽车公司的长期投资者。<br/></p><p>特斯拉是主要负责总体经营战略，旨在向大众市场的消费者提供负担得起的电动汽车。截至2012年3月他在特斯拉享有32%的股权，价值10亿美元。<br/></p><p>2018年8月7日，马斯克在Twitter表示，已获得投资支持，正考虑将特斯拉私有化，估计每股420美元，消息传出后，特斯拉股价稍为上涨，但随后下跌。两周后，马斯克又放弃这个计划，结果引来投资者不满，向他提起诉讼。真实情况是，马斯克所指的“投资支持”是沙特主权财富基金。虽然马斯克与沙特主权财富基金有过会面，但并没有达成任何实质承诺。美国证券交易委员会据此认为马斯克的声称“错误和误导”，并于9月27日起诉马斯克涉嫌证券欺诈，令特斯拉市值蒸发70亿美元。9月29日，美国证券交易委员会和马斯克达成和解协议，特斯拉和马斯克分别被罚款2千万美元，所得款项将分配给蒙受损失的投资者，并且马斯克在45天之内辞去特斯拉董事局主席（董事长）一职，但依然担任CEO一职。</p><br/><h5 id="SolarCity"><a href="#SolarCity" class="headerlink" title="SolarCity"></a><strong>SolarCity</strong></h5><p>马斯克提出了SolarCity的初步概念，2008年10月成立，为公司最大股东和董事，并由他的表弟Lyndon Rive担任CEO和联合创始人。<br/><br>SolarCity是一家专门发展家用光伏发电项目的公司，位于加州福斯特城。业务太阳能板租赁、系统设计、安装以及融资、施工监督等全面的太阳能服务。目前公司在加州、亚利桑那州和俄勒冈州的500个社区提供服务。SolarCity现为美国太阳能发电系统供应商龙头。<br/></p><p>SolarCity提出的租赁计划是一个20 年的计划，就是让房主在固定的月租费以55美元起价，没有首付款的情况下，租赁太阳能光伏系统安装在自己的屋顶上（SolorCity免费设计及安装），来降低家用电力费用。<br/></p><p>在2012年马斯克宣布，SolarCity和特斯拉汽车公司将共享电动车电池技术，以降低屋顶太阳能板对地区电网的冲击。在2013年12月4日SolarCity宣布推出一款采用特斯拉电池技术的智能能源存储系统“SolarCity DemandLogic”，能够存储电力来因应高峰时段的需求、进而降低能源成本，同时还能在断电时当备用电源。</p><br/><h5 id="超回路列车"><a href="#超回路列车" class="headerlink" title="超回路列车"></a><strong>超回路列车</strong></h5><p>2013年8月12日，为表达对“造价位居世界前列、速度却排在倒数字置”的加州高铁项目获批的失望，马斯克提出一种连接洛杉矶地区和旧金山湾区的一种名为“Hyperloop”的新形交通概念。这是一个假想的亚音速浮空列车系统，由西尔马（洛杉矶北部的一个区）起，连接到海沃德（旧金山以东），绵延约350英里（560公里），乘客理论上能在30分钟内跨越约350英里（560公里）的距离，这甚至比商用飞机的速度更快。该系统是建议使用一个局部真空的管度系统承载胶囊型的列车，大大减低空气阻力，所以它理论上列车能用相对低的功率高速行驶。因为它的低功率，有人提议完全依靠太阳能为系统提供动力。<br/></p><p>如果马斯克的建议在技术层面上可行的话，“Hyperloop”会比任何其他形式的交通工具都便宜。马斯克声称这套浮空列车系统的总成本估计为60亿，但是这个估计在目前还是有争议的。</p><br/><h5 id="Neuralink"><a href="#Neuralink" class="headerlink" title="Neuralink"></a><strong>Neuralink</strong></h5><p>​        在马斯克的设想中，一枚芯片可以让大脑和计算机有了一条通路：“它”可以实时监测你的健康、并警告你是否有心脏病发作、中风等风险；“它”可以模拟催产素、血清素等化学物质的释放，通过控制激素水平，减轻焦虑，缓解抑郁——对，抑郁症患者的福音；“它”甚至可以存储一个人的记忆。</p><p>他在2017年成立的新公司Neuralink,他们试图研发一种技术，将人脑与计算机系统融合在一起。这种利用脑机接口实现的融合，将有助于治疗人类的脑部疾病。以及，很可能，使人类变得更加强大。</p><p>脑部是人类的神经中枢。作为人体最重要的器官之一，它承担着维系人类生存的基本任务。与此同时，几乎所有的高级神经活动都在脑部完成。如果将人体视为一台电脑，那么大脑就是这台“人类PC”的运算核心。普通的电脑可以通过外接硬盘、外接显卡、外接内存等方法提高性能，而有科学家认为，这样的“改良”同样可以适用于人脑。这种观点的产生，最终形成了研发脑机接口的动力。</p><p>脑机接口（brain-computer interface）是指创建在人类或动物脑与外部设备间的直接连接通路。被脑机接口串联的人脑能够与外部设备之间互相传送信号，交换信息。可以预料，当这一技术发展到一定程度，人们就能够通过“外挂”外部设备的方式，来提高生物体脑部的运算能力。而Neuralink想做的，就是研发出一个足够强大的脑机接口，治愈人类的脑部疾病，并赋予人脑更强大的功能。</p><br/><br/><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/store/1.jpg" alt="post-cover"></p>]]></content>
      
      
      <categories>
          
          <category> write </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP状态码详解</title>
      <link href="2020/12/19/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/12/19/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="我们在访问一个网页时-浏览器会返回一个HTTP状态码-它代表这次访问的情况。之前开发项目做测试时-返回的一些状态码老是想不起来是什么-我做了个笔记-闲暇时可以记忆一下"><a href="#我们在访问一个网页时-浏览器会返回一个HTTP状态码-它代表这次访问的情况。之前开发项目做测试时-返回的一些状态码老是想不起来是什么-我做了个笔记-闲暇时可以记忆一下" class="headerlink" title="我们在访问一个网页时,浏览器会返回一个HTTP状态码,它代表这次访问的情况。之前开发项目做测试时,返回的一些状态码老是想不起来是什么,我做了个笔记,闲暇时可以记忆一下"></a>我们在访问一个网页时,浏览器会返回一个HTTP状态码,它代表这次访问的情况。之前开发项目做测试时,返回的一些状态码老是想不起来是什么,我做了个笔记,闲暇时可以记忆一下</h4><br/><table><thead><tr><th align="center">状态码</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">100</td><td align="center">客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</td></tr><tr><td align="center">101</td><td align="center">服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。 　　只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。</td></tr><tr><td align="center">102</td><td align="center">由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</td></tr><tr><td align="center">200</td><td align="center">请求已成功，请求所希望的响应头或数据体将随此响应返回。</td></tr><tr><td align="center">201</td><td align="center">请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 ‘202 Accepted’。</td></tr><tr><td align="center">202</td><td align="center">服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。 　　返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。</td></tr><tr><td align="center">203</td><td align="center">服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超级。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</td></tr><tr><td align="center">204</td><td align="center">服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。 　　如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。 　　由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</td></tr><tr><td align="center">205</td><td align="center">服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。 　　与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</td></tr><tr><td align="center">206</td><td align="center">服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。 　　该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。 　　响应必须包含如下的头部域： 　　Content-Range 用以指示本次响应中返回的内容的范围；如果是 Content-Type 为 multipart/byteranges 的多段下载，则每一 multipart 段中都应包含 Content-Range 域用以指示本段的内容范围。假如响应中包含 Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。 　　Date 　　ETag 和/或 Content-Location，假如同样的请求本应该返回200响应。 　　Expires, Cache-Control，和/或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 　　假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range 弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。 　　假如 ETag 或 Last-Modified 头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。 　　任何不支持 Range 以及 Content-Range 头的缓存都禁止缓存206响应返回的内容。</td></tr><tr><td align="center">207</td><td align="center">由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</td></tr><tr><td align="center">300</td><td align="center">被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。 　　除非这是一个 HEAD 请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由 Content-Type 定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。 　　如果服务器本身已经有了首选的回馈选择，那么在 Location 中应当指明这个回馈的 URI；浏览器可能会将这个 Location 值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</td></tr><tr><td align="center">301</td><td align="center">被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。 　　新的永久性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 　　如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 　　注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的 POST 请求得到了一个301响应的话，接下来的重定向请求将会变成 GET 方式。</td></tr><tr><td align="center">302</td><td align="center">请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 　　新的临时性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 　　如果这不是一个 GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 　　注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用 GET 方式访问在 Location 中规定的 URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</td></tr><tr><td align="center">303</td><td align="center">对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。 　　新的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 　　注意：许多 HTTP/1.1 版以前的 浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</td></tr><tr><td align="center">304</td><td align="center">如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。 　　该响应必须包含以下的头信息： 　　Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将 Date 字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。 　　ETag 和/或 Content-Location，假如同样的请求本应返回200响应。 　　Expires, Cache-Control，和/或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 　　假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的 GET 请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。 　　假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。 　　假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值。</td></tr><tr><td align="center">305</td><td align="center">被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。 　　注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。</td></tr><tr><td align="center">306</td><td align="center">在最新版的规范中，306状态码已经不再被使用。</td></tr><tr><td align="center">307</td><td align="center">请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 　　新的临时性的URI 应当在响应的 Location 域中返回。除非这是一个HEAD 请求，否则响应的实体中应当包含指向新的URI 的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的 URI 发出访问请求。 　　如果这不是一个GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</td></tr><tr><td align="center">400</td><td align="center">1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。 　　2、请求参数有误。</td></tr><tr><td align="center">401</td><td align="center">当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。</td></tr><tr><td align="center">402</td><td align="center">该状态码是为了将来可能的需求而预留的。</td></tr><tr><td align="center">403</td><td align="center">服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</td></tr><tr><td align="center">404</td><td align="center">请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</td></tr><tr><td align="center">405</td><td align="center">请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。 　　鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</td></tr><tr><td align="center">406</td><td align="center">请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。 　　除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由 Content-Type 头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</td></tr><tr><td align="center">407</td><td align="center">与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。参见RFC 2617。</td></tr><tr><td align="center">408</td><td align="center">请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</td></tr><tr><td align="center">409</td><td align="center">由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。 　　冲突通常发生于对 PUT 请求的处理中。例如，在采用版本检查的环境下，某次 PUT 提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本。</td></tr><tr><td align="center">410</td><td align="center">被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。 　　410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为’410 Gone’，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。</td></tr><tr><td align="center">411</td><td align="center">服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。</td></tr><tr><td align="center">412</td><td align="center">服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</td></tr><tr><td align="center">413</td><td align="center">服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。 　　如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。</td></tr><tr><td align="center">414</td><td align="center">请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括： 　　本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。 　　重定向URI “黑洞”，例如每次重定向把旧的 URI 作为新的 URI 的一部分，导致在若干次重定向后 URI 超长。 　　客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的 URI，当 GET 后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码。</td></tr><tr><td align="center">415</td><td align="center">对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</td></tr><tr><td align="center">416</td><td align="center">如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。 　　假如 Range 使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个 Content-Range 实体头，用以指明当前资源的长度。这个响应也被禁止使用 multipart/byteranges 作为其 Content-Type。</td></tr><tr><td align="center">417</td><td align="center">在请求头 Expect 中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect 的内容无法被满足。</td></tr><tr><td align="center">421</td><td align="center">从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</td></tr><tr><td align="center">422</td><td align="center">从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</td></tr><tr><td align="center">422</td><td align="center">请求格式正确，但是由于含有语义错误，无法响应。（RFC 4918 WebDAV）423 Locked 　　当前资源被锁定。（RFC 4918 WebDAV）</td></tr><tr><td align="center">424</td><td align="center">由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。（RFC 4918 WebDAV）</td></tr><tr><td align="center">425</td><td align="center">在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中。</td></tr><tr><td align="center">426</td><td align="center">客户端应当切换到TLS/1.0。（RFC 2817）</td></tr><tr><td align="center">449</td><td align="center">由微软扩展，代表请求应当在执行完适当的操作后进行重试。</td></tr><tr><td align="center">500</td><td align="center">服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现。</td></tr><tr><td align="center">501</td><td align="center">服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。</td></tr><tr><td align="center">502</td><td align="center">作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</td></tr><tr><td align="center">503</td><td align="center">由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。 　　注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。</td></tr><tr><td align="center">504</td><td align="center">作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。 　　注意：某些代理服务器在DNS查询超时时会返回400或者500错误</td></tr><tr><td align="center">505</td><td align="center">服务器不支持，或者拒绝支持在请求中使用的 HTTP 版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</td></tr><tr><td align="center">506</td><td align="center">由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</td></tr><tr><td align="center">507</td><td align="center">服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。WebDAV (RFC 4918)</td></tr><tr><td align="center">509</td><td align="center">服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。</td></tr><tr><td align="center">510</td><td align="center">获取资源所需要的策略并没有没满足。（RFC 2774）</td></tr></tbody></table><p><br/><br/></p><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/Japan/4.jpg" alt="post-cover"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git设置代理</title>
      <link href="2020/12/16/Git%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
      <url>2020/12/16/Git%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="很多时候我们在使用github的时候会出现下载很慢的情况，如果你使用代理-会提高下载和上传速度"><a href="#很多时候我们在使用github的时候会出现下载很慢的情况，如果你使用代理-会提高下载和上传速度" class="headerlink" title="很多时候我们在使用github的时候会出现下载很慢的情况，如果你使用代理,会提高下载和上传速度"></a>很多时候我们在使用github的时候会出现下载很慢的情况，如果你使用代理,会提高下载和上传速度</h4><blockquote><p>克隆 repo 的两种方式：https 和 ssh 方式</p></blockquote><blockquote><p>ssh 方式：git clone <a href="mailto:&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#109;">&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#109;</a>:xxx/git.git</p></blockquote><blockquote><p>https 方式：git clone <a href="https://github.com/xxx/git.git">https://github.com/xxx/git.git</a></p></blockquote><blockquote><blockquote><p>https 方式克隆的 repo，走 http 或 sock5 代理，任选一个</p></blockquote></blockquote><br/><h5 id="1-查看代理设置"><a href="#1-查看代理设置" class="headerlink" title="1.查看代理设置"></a>1.查看代理设置</h5><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git config –global http.proxy</p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git config –global https.proxy</p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git config –global -l</p><br/><h5 id="2-设置http-https全局代理"><a href="#2-设置http-https全局代理" class="headerlink" title="2.设置http/https全局代理"></a>2.设置http/https全局代理</h5><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git config –global http.proxy <a href="http://127.0.0.1:1087/">http://127.0.0.1:1087</a></p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git config –global https.proxy <a href="http://127.0.0.1:1087/">http://127.0.0.1:1087</a></p><br/><h5 id="3-设置Socks5全局代理"><a href="#3-设置Socks5全局代理" class="headerlink" title="3.设置Socks5全局代理"></a>3.设置Socks5全局代理</h5><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git config –global http.proxy socks5://127.0.0.1:1080</p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git config –global https.proxy socks5://127.0.0.1:1080</p><br/><h5 id="4-ssh-克隆方式的代理设置，直接在全局设置文件配置，即-ssh-config-文件"><a href="#4-ssh-克隆方式的代理设置，直接在全局设置文件配置，即-ssh-config-文件" class="headerlink" title="4.ssh 克隆方式的代理设置，直接在全局设置文件配置，即 ~/.ssh/config 文件"></a>4.ssh 克隆方式的代理设置，直接在全局设置文件配置，即 ~/.ssh/config 文件</h5><br/><pre><code>     HostName github.com      User git     \# 走 HTTP 代理，需要 brew install socat     \# ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=1087     \# 走 socks5 代理（如 Shadow~socks）      ProxyCommand nc -v -x 127.0.0.1:1086 %h %p      \# 走 socks5 代理（如 Shadow~socks），Windows 平台没有 nc 命令      \# ProxyCommand connect -S 127.0.0.1:1086 %h %p </code></pre><br/><h5 id="5-删除全局代理"><a href="#5-删除全局代理" class="headerlink" title="5.删除全局代理"></a>5.删除全局代理</h5><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git config –global –unset http.pr&nbsp;oxy</p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git config –global –unset https.proxy</p><br/><h5 id="6-个人代理服务器设置"><a href="#6-个人代理服务器设置" class="headerlink" title="6.个人代理服务器设置"></a>6.个人代理服务器设置</h5><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git config –global http.proxy <a href="http://proxyuser:proxypwd@proxy.server.com:port">http://proxyuser:proxypwd@proxy.server.com:port</a></p><br/><h5 id="7-只对github-com使用代理-其他仓库不走代理"><a href="#7-只对github-com使用代理-其他仓库不走代理" class="headerlink" title="7.只对github.com使用代理,其他仓库不走代理"></a>7.只对github.com使用代理,其他仓库不走代理</h5><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git config –global http.<a href="https://github.com.proxy/">https://github.com.proxy</a> socks5://127.0.0.1:1080</p><br/><h5 id="8-取消github代理"><a href="#8-取消github代理" class="headerlink" title="8.取消github代理"></a>8.取消github代理</h5><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git config –global –unset http.<a href="https://github.com.proxy/">https://github.com.proxy</a></p><br/><br/><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/Japan/6.jpg" alt="post-cover"></p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux防火墙(设置)开启/关闭</title>
      <link href="2020/12/16/Linux%E9%98%B2%E7%81%AB%E5%A2%99-%E8%AE%BE%E7%BD%AE-%E5%BC%80%E5%90%AF-%E5%85%B3%E9%97%AD/"/>
      <url>2020/12/16/Linux%E9%98%B2%E7%81%AB%E5%A2%99-%E8%AE%BE%E7%BD%AE-%E5%BC%80%E5%90%AF-%E5%85%B3%E9%97%AD/</url>
      
        <content type="html"><![CDATA[<h4 id="在旧版本的CentOS中，是使用-iptables-命令来设置防火墙的。但是，从CentOS7开始，默认就没有安装iptables，而是改用firewall来配置防火墙。但iptalbes的一些命令仍然可以使用。-使用firewall-cmd命令添加规则-下面来说下firewall操作命令"><a href="#在旧版本的CentOS中，是使用-iptables-命令来设置防火墙的。但是，从CentOS7开始，默认就没有安装iptables，而是改用firewall来配置防火墙。但iptalbes的一些命令仍然可以使用。-使用firewall-cmd命令添加规则-下面来说下firewall操作命令" class="headerlink" title="在旧版本的CentOS中，是使用 iptables 命令来设置防火墙的。但是，从CentOS7开始，默认就没有安装iptables，而是改用firewall来配置防火墙。但iptalbes的一些命令仍然可以使用。 使用firewall-cmd命令添加规则,下面来说下firewall操作命令"></a><strong>在旧版本的CentOS中，是使用 iptables 命令来设置防火墙的。但是，从CentOS7开始，默认就没有安装iptables，而是改用firewall来配置防火墙。但iptalbes的一些命令仍然可以使用。 使用firewall-cmd命令添加规则,下面来说下firewall操作命令</strong></h4><br/><br/><h5 id="1-查看防火墙状态"><a href="#1-查看防火墙状态" class="headerlink" title="1.查看防火墙状态"></a><strong>1.查看防火墙状态</strong></h5><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;systemctl status firewalld</p><br/><h5 id="2-关闭防火墙"><a href="#2-关闭防火墙" class="headerlink" title="2.关闭防火墙"></a><strong>2.关闭防火墙</strong></h5><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;systemctl stop firewalld</p><br/><h5 id="3-打开防火墙"><a href="#3-打开防火墙" class="headerlink" title="3.打开防火墙"></a><strong>3.打开防火墙</strong></h5><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;systemctl start firewalld</p><br/><h5 id="4-永久开放某个端口"><a href="#4-永久开放某个端口" class="headerlink" title="4.永久开放某个端口"></a><strong>4.永久开放某个端口</strong></h5><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;firewall-cmd --zone=public --add-port=6379/tcp --permanent</p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;firewall-cmd --reload(重新载入)</p> <br/><h5 id="5-永久关闭某个端口"><a href="#5-永久关闭某个端口" class="headerlink" title="5.永久关闭某个端口"></a><strong>5.永久关闭某个端口</strong></h5><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;firewall-cmd --remove-port=6379/tcp --permanent</p><br/><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;firewall-cmd --reload(重新载入)</p><p><br/><br/></p><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/Japan/7.jpg" alt="post-cover"></p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown简单使用</title>
      <link href="2020/12/15/MarkDown%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>2020/12/15/MarkDown%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/Japan/5.jpg" alt="post-cover"></p><h4 id="Markdown-是目前互联网上最流行的写作语言，它使用一些简单的符号（-gt-）来标记文本格式，其简洁的语法、优美的格式以及强大的软件支持深受广大网友的喜爱。一个样式可以有多种写法-Markdown同时也支持HTML标签写法-博主只按照自己的习惯列举的几个常用简单写法-不同编译器可能呈现不同的效果-下面以Typora编写效果展示"><a href="#Markdown-是目前互联网上最流行的写作语言，它使用一些简单的符号（-gt-）来标记文本格式，其简洁的语法、优美的格式以及强大的软件支持深受广大网友的喜爱。一个样式可以有多种写法-Markdown同时也支持HTML标签写法-博主只按照自己的习惯列举的几个常用简单写法-不同编译器可能呈现不同的效果-下面以Typora编写效果展示" class="headerlink" title="Markdown 是目前互联网上最流行的写作语言，它使用一些简单的符号（* / ` &gt; [] () #）来标记文本格式，其简洁的语法、优美的格式以及强大的软件支持深受广大网友的喜爱。一个样式可以有多种写法,Markdown同时也支持HTML标签写法,博主只按照自己的习惯列举的几个常用简单写法,不同编译器可能呈现不同的效果,下面以Typora编写效果展示"></a>Markdown 是目前互联网上最流行的写作语言，它使用一些简单的符号（* / ` &gt; [] () #）来标记文本格式，其简洁的语法、优美的格式以及强大的软件支持深受广大网友的喜爱。一个样式可以有多种写法,Markdown同时也支持HTML标签写法,博主只按照自己的习惯列举的几个常用简单写法,不同编译器可能呈现不同的效果,下面以Typora编写效果展示</h4><br/><h5 id="优点？"><a href="#优点？" class="headerlink" title="优点？"></a>优点？</h5><blockquote><p>专注你的文字内容而不是排版样式，安心写作。</p></blockquote><blockquote><p>轻松的导出HTML、PDF 和本身的.md 文件。</p></blockquote><blockquote><p>纯文本内容，兼容所有的文本编辑器与字处理软件。</p></blockquote><blockquote><p>随时修改你的文章版本，不必像字处理软件生成若干文件</p></blockquote><blockquote><p>版本导致混乱。可读、直观、学习成本低。</p></blockquote><br/><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><br/><h5 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a><strong>1.标题</strong></h5><pre><code>  # 一级标题  ## 二级标题  ### 三级标题  #### 四级级标题  ##### 五级标题  ###### 六级标题</code></pre><h5 id="效果"><a href="#效果" class="headerlink" title="效果:"></a>效果:</h5><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/content/markdown/1.png"></p><br/><h5 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a><strong>2.字体</strong></h5><blockquote><p>斜体</p><blockquote><p>*斜体* </p></blockquote></blockquote><blockquote><p>粗体</p><blockquote><p>**粗体**</p></blockquote></blockquote><blockquote><p>粗斜体</p><blockquote><p>***粗斜体***</p></blockquote></blockquote><blockquote><p>删除线</p><blockquote><p>~~删除线~~</p></blockquote></blockquote><blockquote><p>下拉线</p><blockquote><p>&lt;u&gt;下划线&lt;/u&gt;</p></blockquote></blockquote><h5 id="效果-1"><a href="#效果-1" class="headerlink" title="效果:"></a>效果:</h5><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/content/markdown/2.png"></p><br/><h5 id="3-脚注"><a href="#3-脚注" class="headerlink" title="3.脚注"></a><strong>3.脚注</strong></h5><p>JAVA太难了,我想[^1]</p><p>[^1]:吃点糖</p><h5 id="效果-2"><a href="#效果-2" class="headerlink" title="效果:"></a>效果:</h5><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/content/markdown/3.png"></p><br/><h5 id="4-列表"><a href="#4-列表" class="headerlink" title="4.列表"></a><strong>4.列表</strong></h5><blockquote><p>无序列表</p><blockquote><p>* 第一项<br>* 第二项<br>* 第三项</p></blockquote></blockquote><blockquote><p>有序列表</p><blockquote><p>1.第一项<br>2.第二项<br>3.第三项</p></blockquote></blockquote><blockquote><p>列表嵌套</p><blockquote><ol><li>第一项<br>(四个空格) * 子项</li><li>第二项<br>(四个空格)* 子项</li></ol></blockquote></blockquote><h5 id="效果-3"><a href="#效果-3" class="headerlink" title="效果:"></a>效果:</h5><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/content/markdown/4.png"><br><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/content/markdown/5.png"><br><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/content/markdown/6.png"></p><br/><h5 id="4-图片和超链接"><a href="#4-图片和超链接" class="headerlink" title="4.图片和超链接"></a><strong>4.图片和超链接</strong></h5><blockquote><p>文字超链接</p></blockquote><blockquote><blockquote><p>这是[艾德蒙斯的博客](<a href="https://edmonds.cn/">https://edmonds.cn</a>)</p></blockquote></blockquote><blockquote><p>文字变量形式</p></blockquote><blockquote><blockquote><p>这是 艾德蒙斯的博客][Edmonds]<br>[Edmonds]: <a href="https://edmonds.cn/">https://edmonds.cn</a></p></blockquote></blockquote><blockquote><p>图片普通用法</p><blockquote><p>![SEO搜索用,可不写](<a href="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/55c66775e004e09321e8e30d20d94b73_1.jpg,&quot;%E6%82%AC%E6%B5%AE%E6%96%87%E5%AD%97&quot;">https://uploademonds.oss-cn-beijing.aliyuncs.com/image/55c66775e004e09321e8e30d20d94b73_1.jpg,&quot;悬浮文字&quot;</a>)</p></blockquote></blockquote><blockquote><p>图片变量形式</p><blockquote><p>这是艾德蒙斯的头像[head][edmonds]<br>[edmonds]:<a href="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/55c66775e004e09321e8e30d20d94b73_1.jpg">https://uploademonds.oss-cn-beijing.aliyuncs.com/image/55c66775e004e09321e8e30d20d94b73_1.jpg</a></p></blockquote></blockquote><h5 id="效果-4"><a href="#效果-4" class="headerlink" title="效果:"></a>效果:</h5><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/content/markdown/7.png"></p><br/><h5 id="5-表格"><a href="#5-表格" class="headerlink" title="5.表格"></a><strong>5.表格</strong></h5><p>| 左对齐 | 右对齐 | 居中 |<br>| :—–| —-: | :—-: |<br>| 单元格 | 单元格 | 单元格 |<br>| 单元格 | 单元格 | 单元格 |</p><h5 id="效果-5"><a href="#效果-5" class="headerlink" title="效果:"></a>效果:</h5><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/content/markdown/8.png"></p><br/><h5 id="6-代码块"><a href="#6-代码块" class="headerlink" title="6.代码块"></a><strong>6.代码块</strong></h5><p>1.两个`转为代码样式<br>  `public void  edmonds(){} `</p><p>2.代码区块使用 4 个空格或者一个制表符(Tab 键)<br>(四个空格)public void edmonds (){}</p><h5 id="效果-6"><a href="#效果-6" class="headerlink" title="效果:"></a>效果:</h5><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/content/markdown/9.png"></p><br/><h5 id="7-分割线"><a href="#7-分割线" class="headerlink" title="7.分割线"></a>7.<strong>分割线</strong></h5><p>***</p><p>* * *</p><p>*****</p><p>- - -</p><p>-———</p><h5 id="效果-7"><a href="#效果-7" class="headerlink" title="效果:"></a>效果:</h5><p><img src="https://uploademonds.oss-cn-beijing.aliyuncs.com/image/content/markdown/10.png"></p><br/><br/>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
